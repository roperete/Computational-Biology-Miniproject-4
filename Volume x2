<!DOCTYPE html>
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Kafer Replica volume x2 100000</title>
<style type="text/css">
body{
		font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",
		 Helvetica, Arial, "Lucida Grande", sans-serif;
	 padding : 15px;
	 max-width: 600px;
	 margin: auto;
}
td {
	 padding: 10px;
	 vertical-align: top;
}
</style>


<script src="./artistoo.js"></script>
<script src="./fpsmeter.min.js"></script>
<script>
"use strict"


/*	----------------------------------
	CONFIGURATION SETTINGS
	----------------------------------
*/
let config = {

	// Grid settings
	ndim : 2,
	field_size : [100, 100],
	
	// CPM parameters and configuration
	conf : {
		// Basic CPM parameters
		torus : [false,false],				// Should the grid have linked borders?
		seed : 1,							// Seed for random number generation.
		T : 60,								// CPM temperature
		
		// Constraint parameters. 
		// Mostly these have the format of an array in which each element specifies the
		// parameter value for one of the cellkinds on the grid.
		// First value is always cellkind 0 (the background) and is often not used.

		
		// Adhesion parameters:
		J : [ [NaN,300,0,300], [300,60,200,90], [0,200,0,200], [300,90,200,90] ],
		
		// VolumeConstraint parameters
		LAMBDA_V : [0,800,NaN,200],				// VolumeConstraint importance per cellkind
		V : [0,30,NaN,60],					// Target volume of each cellkind
		
		// PerimeterConstraint parameters
		LAMBDA_P : [0,80,NaN,80],				// PerimeterConstraint importance per cellkind
		P : [0,58,NaN,80],					// Target perimeter of each cellkind
		
		// BarrierConstraint parameters
		IS_BARRIER : [false, false, true, false ],
		
		// ActivityConstraint parameters
		//LAMBDA_ACT : [0,180,NaN,180],			// ActivityConstraint importance per cellkind
		//MAX_ACT : [0,100,NaN,100],				// Activity memory duration per cellkind
		ACT_MEAN : "geometric"				// Is neighborhood activity computed as a
		// "geometric" or "arithmetic" mean?
								
	},
	
	// Simulation setup and configuration: this controls stuff like grid initialization,
	// runtime, and what the output should look like.
	simsettings : {
	
		// Cells on the grid
		NRCELLS : [180,0,20],					// Number of cells to seed for all
		// non-background cellkinds.
		// Runtime etc
		BURNIN : 500,
		RUNTIME : 1000,
		RUNTIME_BROWSER : "100000",
		
		// Visualization
		CANVASCOLOR : "eaecef",
		CELLCOLOR : ["379298","AAAAAA","111666"],
		ACTCOLOR : [false,false,false],			// Should pixel activity values be displayed?
		SHOWBORDERS : [true,false,true],	
		BORDERCOL : ["000000","FF0000","AAAAFF"],			// Should cellborders be displayed?
		zoom : 2,								// zoom in on canvas with this factor.
		
		// Output images
		SAVEIMG : true,						// Should a png image of the grid be saved
		// during the simulation?
		IMGFRAMERATE : 1,					// If so, do this every <IMGFRAMERATE> MCS.
		SAVEPATH : "output/img/NoTorusDemo",	// ... And save the image in this folder.
		EXPNAME : "NoTorusDemo",					// Used for the filename of output images.
		
		// Output stats etc
		STATSOUT : { browser: true, node: true }, // Should stats be computed?
		LOGRATE : 10							// Output stats every <LOGRATE> MCS.

	}
}
/*	---------------------------------- */
let sim, meter


function initialize(){
	 /* 	The following functions are defined below and will be added to
	 	the simulation object. If Custom-methods above is set to false,
	 	this object is ignored and not used in the html/node files. */
	 let custommethods = {
	 	initializeGrid : initializeGrid,
	 	buildBorder : buildBorder
	 }
	sim = new CPM.Simulation( config, custommethods )
let Cdir =  new CPM.PreferredDirectionConstraint({
	LAMBDA_DIR : [0,50,0,50], 
	DIR :  [[0,0],[50,0],[0,0],[50,0]]
})
sim.C.add( Cdir )


	meter = new FPSMeter({left:"auto", right:"5px"})
	step()
}


function step(){
	sim.step()
	meter.tick()
	if( sim.conf["RUNTIME_BROWSER"] == "Inf" | sim.time+1 < sim.conf["RUNTIME_BROWSER"] ){
		requestAnimationFrame( step )
	}
}



/* The following custom methods will be added to the simulation object*/
function initializeGrid(){
	
	// add the initializer if not already there
	if( !this.helpClasses["gm"] ){ this.addGridManipulator() }
	
	let nrcells = this.conf["NRCELLS"], cellkind, i
	this.buildBorder()
		
	// Seed the right number of cells for each cellkind
	for( cellkind = 0; cellkind < nrcells.length; cellkind ++ ){
			
		for( i = 0; i < nrcells[cellkind]; i++ ){
			// first cell always at the midpoint. Any other cells
			// randomly.				
			if( i == 0 ){
				this.gm.seedCellAt( cellkind+1, this.C.midpoint )
			} else {
				this.gm.seedCell( cellkind+1 )
			}
		}
	}
}
	
function buildBorder(){
		
	let bordervoxels
		
	bordervoxels = this.gm.makePlane( [], 0, 0 )
	bordervoxels = this.gm.makePlane( bordervoxels, 0, this.C.extents[0]-1)
	bordervoxels = this.gm.makePlane( bordervoxels, 1, 0 )
	bordervoxels = this.gm.makePlane( bordervoxels, 1, this.C.extents[1]-1)
	
	this.gm.changeKind( bordervoxels, 2)
		
}

</script>
</head>
<body onload="initialize()">
  
<h1>Kafer Replica volume x2 100000</h1>
<p>


<br>

</p>
</body>
</html>
